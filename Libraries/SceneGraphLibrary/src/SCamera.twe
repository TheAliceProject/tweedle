class SCamera extends SMovableTurnable {
  SCamera() {
    $SceneGraph.createCameraEntity(camera: this);
    $SceneGraph.bindTransformationProperty(owner: this, property: this.localTransformation, value: this.localTransformation.getValue());
    resetViewingAngle();
    $SceneGraph.setCameraNearClippingPlaneDistance(camera: this, distance: Default.nearClipPlane());
    $SceneGraph.setCameraFarClippingPlaneDistance(camera: this, distance: Default.farClipPlane());
    leftHand <- new SVRHand(name: "LeftHand", parent: this);
    rightHand <- new SVRHand(name: "RightHand", parent: this);
  }

  void setVehicle(SThing vehicle) {
    this.vehicle <- vehicle;
    this.localTransformation.value <- $SceneGraph.setVehicle(vehicle: vehicle, rider: this);
  }

  void moveAndOrientToAGoodVantagePointOf(SThing entity,
          Duration duration <- Default.duration(),
          AnimationStyle animationStyle <- Default.animationStyle() ) {

    Position pos <- new Position(x: 2, y: 4, z: -8);
    Orientation rot <- new Orientation(forward: new Direction(x: -pos.x, y: -pos.y, z: -pos.z), up: Direction.UP);
    VantagePoint end <- new VantagePoint(position: pos, orientation: rot);

    this.localTransformation.animateValue(endValue: end, asSeenBy: entity, duration: duration, animationStyle: animationStyle);
  }

  void setNearClippingPlaneDistance(Number distance) {
    $SceneGraph.setCameraNearClippingPlaneDistance(camera: this, distance: distance);
  }

  DecimalNumber getNearClippingPlaneDistance() {
    return $SceneGraph.getCameraNearClippingPlaneDistance(camera: this);
  }

  void setFarClippingPlaneDistance(Number distance) {
    $SceneGraph.setCameraFarClippingPlaneDistance(camera: this, distance: distance);
  }

  void resetViewingAngle() {
    $SceneGraph.setCameraVerticalFOV(camera: this, fov: Default.verticalFOV());
  }

  DecimalNumber getFarClippingPlaneDistance() {
    return $SceneGraph.getCameraFarClippingPlaneDistance(camera: this);
  }

  void setHorizontalViewingAngle(Angle angle) {
    if (angle.radians > 0) {
      $SceneGraph.setCameraHorizontalFOV(camera: this, fov: angle);
    } else {
      resetViewingAngle();
    }
  }

  DecimalNumber getHorizontalViewingAngle() {
    return $SceneGraph.getCameraHorizontalFOV(camera: this);
  }

  void setVerticalViewingAngle(Angle angle) {
    if (angle.radians > 0) {
      $SceneGraph.setCameraVerticalFOV(camera: this, fov: angle);
    } else {
      resetViewingAngle();
    }
  }

  DecimalNumber getVerticalViewingAngle() {
    return $SceneGraph.getCameraVerticalFOV(camera: this);
  }

  SVRHand getLeftHand() {
    return leftHand;
  }

  SVRHand getRightHand() {
    return rightHand;
  }

  SVRHand leftHand;
  SVRHand rightHand;
}
