class SModel extends SMovableTurnable
{
    SModel(TextString resource) {
        currentResource <- resource;
        $SceneGraph.createEntity(model: this, resource: resource);
        $SceneGraph.bindTransformationProperty(owner: this, property: this.localTransformation, value: this.localTransformation.getValue());

        // get default size
        this.size.sync();
        this.defaultSize <- this.size.getValue();
        $SceneGraph.bindSizeProperty(owner: this, property: this.size, value: this.defaultSize);

        $SceneGraph.bindPaintProperty(owner: this, property: this.paint, value: this.paint.getValue());
        $SceneGraph.bindOpacityProperty(owner: this, property: this.opacity, value: this.opacity.getValue());
    }

    void setResource(TextString resource) {
        if (currentResource != resource) {
            currentResource <- resource;
            $SceneGraph.setEntityResource(model: this, resource: resource);
            this.size.sync();
            this.defaultSize <- this.size.getValue();
        }
    }

    Size getSize() {
        return this.size.getValue();
    }

    void setSize(Size size, Duration duration <- Default.duration(), AnimationStyle animationStyle <- Default.animationStyle())
    {
        // constrain dimensions without values
        DecimalNumber w <- size.width;
        DecimalNumber h <- size.height;
        DecimalNumber d <- size.depth;

        if (Epsilon.TINY.isWithinZero(number: this.defaultSize.width)) {
            w <- this.defaultSize.width;
        }

        if (Epsilon.TINY.isWithinZero(number: this.defaultSize.height)) {
            h <- this.defaultSize.height;
        }

        if (Epsilon.TINY.isWithinZero(number: this.defaultSize.depth)) {
            d <- this.defaultSize.depth;
        }

        this.size.animateValue(endValue: new Size(width: w, height: h, depth: d), duration: duration, animationStyle: animationStyle);
    }

    DecimalNumber getWidth() {
        return this.getSize().width;
    }

    void setWidth(DecimalNumber width, SetDimensionPolicy policy <- Default.dimensionPolicy(), Duration duration <- Default.duration(), AnimationStyle animationStyle <- Default.animationStyle())
    {
        // constrain if model has no width
        if (Epsilon.TINY.isWithinZero(number: this.defaultSize.width)) {
            width <- this.defaultSize.width;
        }

        this.size.animateWidth(width: width, dimensionPolicy: policy, duration: duration, animationStyle: animationStyle);
    }

    DecimalNumber getHeight() {
        return this.getSize().height;
    }

    void setHeight(DecimalNumber height, SetDimensionPolicy policy <- Default.dimensionPolicy(), Duration duration <- Default.duration(), AnimationStyle animationStyle <- Default.animationStyle())
    {
        // constrain if model has no height
        if (Epsilon.TINY.isWithinZero(number: this.defaultSize.height)) {
            height <- this.defaultSize.height;
        }

        this.size.animateHeight(height: height, dimensionPolicy: policy, duration: duration, animationStyle: animationStyle);
    }

    DecimalNumber getDepth() {
        return this.getSize().depth;
    }

    void setDepth(DecimalNumber depth, SetDimensionPolicy policy <- Default.dimensionPolicy(), Duration duration <- Default.duration(), AnimationStyle animationStyle <- Default.animationStyle())
    {
        // constrain if model has no depth
        if (Epsilon.TINY.isWithinZero(number: this.defaultSize.depth)) {
            depth <- this.defaultSize.depth;
        }

        this.size.animateDepth(depth: depth, dimensionPolicy: policy, duration: duration, animationStyle: animationStyle);
    }

    void resize(Number factor,
                Duration duration <- Default.duration(),
                AnimationStyle animationStyle <- Default.animationStyle())
    {
        this.size.animateResize( factor: factor, duration: duration, animationStyle: animationStyle );
    }

    void resizeWidth(Number factor,
                    Duration duration <- Default.duration(),
                    AnimationStyle animationStyle <- Default.animationStyle(),
                    Boolean isVolumePreserved <- Default.isVolumePreserved()) {
        SetDimensionPolicy policy <- SetDimensionPolicy.PRESERVE_NOTHING;
        if (isVolumePreserved) {
            policy <- SetDimensionPolicy.PRESERVE_VOLUME;
        }
        this.size.animateResizeWidth( factor: factor, dimensionPolicy: policy, duration: duration, animationStyle: animationStyle );
    }

    void resizeHeight(Number factor,
                    Duration duration <- Default.duration(),
                    AnimationStyle animationStyle <- Default.animationStyle(),
                    Boolean isVolumePreserved <- Default.isVolumePreserved())
    {
        SetDimensionPolicy policy <- SetDimensionPolicy.PRESERVE_NOTHING;
        if (isVolumePreserved) {
            policy <- SetDimensionPolicy.PRESERVE_VOLUME;
        }
        this.size.animateResizeHeight( factor: factor, dimensionPolicy: policy, duration: duration, animationStyle: animationStyle );
    }

    void resizeDepth(Number factor,
                    Duration duration <- Default.duration(),
                    AnimationStyle animationStyle <- Default.animationStyle(),
                    Boolean isVolumePreserved <- Default.isVolumePreserved())
    {
        SetDimensionPolicy policy <- SetDimensionPolicy.PRESERVE_NOTHING;
        if (isVolumePreserved) {
            policy <- SetDimensionPolicy.PRESERVE_VOLUME;
        }
        this.size.animateResizeDepth( factor: factor, dimensionPolicy: policy, duration: duration, animationStyle: animationStyle );
    }

    Paint getPaint() {
        return this.paint.getValue();
    }

    void setPaint(Paint paint, Duration duration <- Default.duration(), AnimationStyle animationStyle <- Default.animationStyle())
    {
        this.paint.animateValue(endValue: paint, duration: duration, animationStyle: animationStyle);
    }

    Portion getOpacity() {
        return this.opacity.getValue();
    }

    void setOpacity(Portion opacity,
                    Duration duration <- Default.duration(),
                    AnimationStyle animationStyle <- Default.animationStyle() )
    {
        this.opacity.animateValue(endValue: opacity, duration: duration, animationStyle: animationStyle);
    }

    @CompletelyHidden Position getMinPoint( SThing asSeenBy ) {
        return this.getDynamicAxisAlignedMinimumBoundingBox( asSeenBy: asSeenBy ).minimum;
    }

    @CompletelyHidden Position getMaxPoint( SThing asSeenBy ) {
        return this.getDynamicAxisAlignedMinimumBoundingBox( asSeenBy: asSeenBy ).maximum;
    }

    //Returns a bounding box that reflects any changes to the given entity. Namely any changes to the skeleton of jointed models
    @CompletelyHidden AxisAlignedBox getDynamicAxisAlignedMinimumBoundingBox( SThing asSeenBy ) {
        AxisAlignedBox aabb <- $SceneGraph.getLocalBoundingBox(model: this, dynamic: true);
        VantagePoint trans <- this.getVantagePoint( asSeenBy: asSeenBy );
        return aabb.transform(vantagePoint: trans);
    }

    @CompletelyHidden AxisAlignedBox getAxisAlignedMinimumBoundingBox( SThing asSeenBy ) {
        AxisAlignedBox aabb <- $SceneGraph.getLocalBoundingBox(model: this, dynamic: false);
        VantagePoint trans <- this.getVantagePoint( asSeenBy: asSeenBy );
        return aabb.transform(vantagePoint: trans);
    }

    void setVehicle(SThing vehicle) {
        this.vehicle <- vehicle;
        localTransformation.value <- $SceneGraph.setVehicle(vehicle: vehicle, rider: this);
    }

    void say(TextString text,
            TextStyle textStyle <- Default.textStyle(),
            TextFont fontType <- Default.fontType(),
            BubblePosition bubblePosition <- Default.bubblePosition(),
            Duration duration <- Default.duration(),
            Color bubbleFillColor <- Color.WHITE,
            Color bubbleOutlineColor <- Color.WHITE,
            Color fontColor <- Color.BLACK,
            DecimalNumber textScale <- 1.0 ) {
        $SceneGraph.say(entity: this, bubbleText: text, bubblePosition: bubblePosition.getValue(), fontType: fontType.getValue(),
          textStyle: textStyle.getValue(), textScale: textScale, bubbleColor: bubbleFillColor, outlineColor: bubbleOutlineColor, textColor: fontColor, duration: duration);
    }

    void think(TextString text,
            TextStyle textStyle <- Default.textStyle(),
            TextFont fontType <- Default.fontType(),
            BubblePosition bubblePosition <- Default.bubblePosition(),
            Duration duration <- Default.duration(),
            Color bubbleFillColor <- Color.WHITE,
            Color bubbleOutlineColor <- Color.WHITE,
            Color fontColor <- Color.BLACK,
            DecimalNumber textScale <- 1.0 ) {
        $SceneGraph.think(entity: this, bubbleText: text, bubblePosition: bubblePosition.getValue(), fontType: fontType.getValue(),
          textStyle: textStyle.getValue(), textScale: textScale, bubbleColor: bubbleFillColor, outlineColor: bubbleOutlineColor, textColor: fontColor, duration: duration);
    }

    @CompletelyHidden Size defaultSize;
    @CompletelyHidden SizeProperty size <- new SizeProperty(owner: this, value: new Size(width: 1, height: 1, depth: 1));
    @CompletelyHidden PaintProperty paint <- new PaintProperty(owner: this, value: Color.WHITE);
    @CompletelyHidden PortionProperty opacity <- new PortionProperty(owner: this, value: Portion.WHOLE);
    @CompletelyHidden TextString currentResource;
}
