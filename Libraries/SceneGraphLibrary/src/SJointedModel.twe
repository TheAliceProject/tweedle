class SJointedModel extends SModel {
    SJointedModel(JointedModelResource resource) {
        super(resource: resource.getName());
        currentResource <- resource;
        this.name <- resource.getName();
        buildJoints(resource: resource);
    }

    void setResource(JointedModelResource resource) {
        if (currentResource != resource) {
            currentResource <- resource;
            resourceName <- resource.getName();
            $SceneGraph.setEntityResource(model: this, resource: resourceName);
            this.size.sync();
            this.defaultSize <- this.size.getValue();
        }
    }

    @CompletelyHidden void setJointedModelResource(JointedModelResource resource) {
        if (currentResource == resource) {
            return;
        }
        buildJoints(resource: resource);
        // TODO translate more from java, JointedModelImp.setNewResource(), and reconsider use of setResource
        setResource(resource: resource);
    }

    SJoint getJoint(JointId jointId) {
        if (jointId != null && this.joints != null) {
            forEach(SJoint joint in this.joints) {
                if (joint.getId().getName() == jointId.getName()) {
                    return joint;
                }
            }
        }
        return null;
    }

    @CompletelyHidden SJoint[] getJointArray(JointId[] jointIdArray) {
        WholeNumber len <- jointIdArray.length;
        SJoint[] jointArray <- new SJoint[len];
        if (this.joints != null) {
            WholeNumber index <- 0;
            countUpTo(index < len) {
                jointArray[index] <- this.getJoint(jointId: jointIdArray[index]);
            }
        }
        return jointArray;
    }

    @CompletelyHidden SJoint[] getJointArray(JointArrayId jointArrayId) {
        return getJointArray(jointIdArray: getJointIdArray(jointArrayId: jointArrayId));
    }

    @CompletelyHidden JointId[] getJointIdArray(JointArrayId jointArrayId) {
        $Debug.log(message: "Access JointArray by ID is not yet supported. Returning empty array for " .. jointArrayId.elementPattern);
        // TODO Implement resource reading and joint collection
        return new JointId[0];
    }

    void straightenOutJoints(Duration duration <- Default.duration(), AnimationStyle animationStyle <- Default.animationStyle()) {
        if (this.joints != null) {
            eachTogether(SJoint joint in this.joints) {
                joint.straightenOut(duration: duration, animationStyle: animationStyle);
            }
        }
    }

    void strikePose(JointedModelPose pose, Duration duration <- Default.duration(), AnimationStyle animationStyle <- Default.animationStyle()) {
        eachTogether(JointIdTransformationPair pair in pose.getPairs()) {
            SJoint joint <- this.getJoint(jointId: pair.getId());
            if (joint != null) {
                joint.localTransformation.animateValue(endValue: pair.getTransformation(), asSeenBy: joint.getVehicle(), duration: duration, animationStyle: animationStyle);
            }
        }
    }

    @CompletelyHidden void buildJoints(JointedModelResource resource) {
        if (this.joints != null) {
            // TODO Reuse and map existing joint values in
        }
        JointId[] ids <- resource.getJointIds();
        WholeNumber len <- ids.length
        this.joints <- new SJoint[len];
        countUpTo(index < len) {
            JointId jointId <- ids[index];
            SJoint parent <- getJoint(jointId: jointId.getParent())
            joints[index] <- new SJoint(id: jointId, parent: parent, model: this);
        }
    }

    @CompletelyHidden SJoint[] joints;
    @CompletelyHidden JointedModelResource currentResource;
}
