enum SpatialRelation {
    LEFT_OF(placeAxis: Direction.LEFT),
    RIGHT_OF(placeAxis: Direction.RIGHT),
    ABOVE(placeAxis: Direction.UP),
    BELOW(placeAxis: Direction.DOWN),
    IN_FRONT_OF(placeAxis: Direction.FORWARD),
    BEHIND(placeAxis: Direction.BACKWARD);

    SpatialRelation(Direction placeAxis) {
        this.placeAxis <- placeAxis;
    }

    Position getPlacePosition( DecimalNumber alongAxisOffset, AxisAlignedBox subjectBoundingBox, AxisAlignedBox targetBoundingBox ) {
        DecimalNumber x <- 0;
        DecimalNumber y <- 0;
        DecimalNumber z <- 0;

        if( this.placeAxis.x > 0 ) {
            x <- (targetBoundingBox.maximum.right - subjectBoundingBox.minimum.right) + alongAxisOffset;
        } else {
            if( this.placeAxis.x < 0 ) {
                x <- (targetBoundingBox.minimum.right - subjectBoundingBox.maximum.right) - alongAxisOffset;
            }
        }

        if( this.placeAxis.y > 0 ) {
            y <- (targetBoundingBox.maximum.up - subjectBoundingBox.minimum.up) + alongAxisOffset;
        } else {
            if( this.placeAxis.y < 0 ) {
                y <- (targetBoundingBox.minimum.up - subjectBoundingBox.maximum.up) - alongAxisOffset;
            }
        }

        if( this.placeAxis.z > 0 ) {
            z <- (targetBoundingBox.maximum.backward - subjectBoundingBox.minimum.backward) + alongAxisOffset;
        } else {
            if( this.placeAxis.z < 0 ) {
                z <- (targetBoundingBox.minimum.backward - subjectBoundingBox.maximum.backward) - alongAxisOffset;
            }
        }

        return new Position(right: x, up: y, backward: z );
    }

    @CompletelyHidden Direction placeAxis;
}
