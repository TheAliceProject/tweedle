class STextModel extends SModel {
  STextModel(TextString textString) {
      super(resource: $SceneGraph.TEXTMODEL);
      this.text <- new TextProperty(owner: this, value: textString);
      $SceneGraph.bindTextProperty(owner: this, property: this.text, value: this.text.getValue());
  }

  TextString getValue() {
    return this.text.getValue();
  }

  void setValue(TextString text) {
    this.text.setValue( value: text );
  }

  void append(TextString value) {
    this.text.append( value: value );
  }

  void delete(WholeNumber start, WholeNumber end) {
    this.text.delete( start: start, end: end);
  }

  void deleteCharAt(WholeNumber index){
    this.text.delete( start: index, end: index + 1);
  }

  void insert(WholeNumber offset, TextString value) {
    this.text.insert( offset: offset, value: value );
  }

  void replace(WholeNumber start, WholeNumber end, TextString s) {
    return this.text.replace( start: start, end: end, replacement: s );
  }

  void setCharAt(WholeNumber index, Character c){
    return this.text.replaceChar( start: index, end: index + 1, replacement: c);
  }

  Character charAt(WholeNumber index) {
    // TODO implement on TextProperty
    return this.text.charAt(position: index);
  }

  WholeNumber indexOf(TextString s) {
    // TODO implement on TextProperty
    return this.text.indexOf(substring: s, starting: 0);
  }

  WholeNumber indexOf(TextString s, WholeNumber fromIndex) {
    // TODO implement on TextProperty
    return this.text.indexOf(substring: s, starting: fromIndex);
  }

  WholeNumber lastIndexOf(TextString s) {
    // TODO implement on TextProperty
    return this.text.lastIndexOf(substring: s, starting: 0);
  }

  WholeNumber lastIndexOf(TextString s, WholeNumber fromIndex) {
    // TODO implement on TextProperty
    return this.text.lastIndexOf(substring: s, starting: fromIndex);
  }

  WholeNumber getLength() {
    // TODO implement on TextProperty
    return this.text.length();
  }

  @CompletelyHidden TextProperty text;
}
