class SJoint extends SMovableTurnable {
    SJoint(JointId id, SJoint parent, SJointedModel model) {
        this.id <- id;
        this.parent <- parent;
        if (parent == null) {
            this.vehicle <- model;
        } else {
            this.vehicle <- parent;
        }
        this.model <- model;

        $SceneGraph.createJointEntity(joint: this, id: id.getName(), model: model);
        this.defaultTransformation <- $SceneGraph.getLocalTransformation(thing: this);
        $SceneGraph.bindTransformationProperty(owner: this, property: this.localTransformation, value:this.defaultTransformation);
    }

    TextString getId() {
        return this.id;
    }

    SJoint getParent() {
        return this.parent;
    }

    SJointedModel getModel() {
        return this.model;
    }

    Boolean isPivotVisible() {
        if( this.axes != null ) {
            return this.axes.getParent() == this.getSgComposite();
        } else {
            return false;
        }
    }

    void setPivotVisible(Boolean isPivotVisible) {
        if( isPivotVisible ) {
            this.getPivot().setParent( this.getSgComposite() );
        } else {
            if( this.axes != null ) {
                this.axes.setParent( null );
            }
        }
    }

    // TODO reconcile size with minimum bounding box

    DecimalNumber getWidth() {
        this.getSize().width;
    }

    DecimalNumber getHeight() {
        this.getSize().height;
    }

    DecimalNumber getDepth() {
        this.getSize().depth;
    }

    void straightenOut() {
        this.localTransformation.animateValue(endValue: defaultTransformation, asSeenBy: this.getVehicle(), duration: Default.duration(), animationStyle: Default.animationStyle());
    }

    @CompletelyHidden JointId id;
    @CompletelyHidden SJoint parent;
    @CompletelyHidden SJointedModel model;
    @CompletelyHidden VantagePoint defaultTransformation;
}